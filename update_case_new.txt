        case 'update':
          // 🚨 [REBUILT] 重构的 UPDATE 逻辑 - 按用户要求的5级优先级结构
          console.log('🎯 [UPDATE] === UPDATE 决策流程开始 ===');
          console.log('🔍 [UPDATE] Processing update action:', {
            entityId: action.entityId,
            title: action.data.title,
            tagId: action.data.tagId,
            calendarId: action.data.calendarId,
            hasDataExternalId: !!action.data.externalId,
            hasOriginalExternalId: !!action.originalData?.externalId
          });

          // 📊 [PRIORITY 0] 最高优先级：用户数据保护 - 保存操作到本地永久存储
          try {
            console.log('💾 [PRIORITY 0] Saving user operation to persistent local storage...');
            
            // 1. 获取当前本地事件数据
            const localEvents = this.getLocalEvents();
            const eventIndex = localEvents.findIndex((e: any) => e.id === action.entityId);
            
            if (eventIndex !== -1) {
              // 2. 创建备份并更新本地数据
              const backupEvent = {
                ...localEvents[eventIndex],
                lastBackupAt: new Date(),
                backupReason: 'update-operation'
              };
              
              // 3. 确保用户修改立即保存到本地
              const updatedEvent = {
                ...localEvents[eventIndex],
                ...action.data,
                updatedAt: new Date(),
                lastLocalEdit: new Date(),
                syncStatus: 'pending-update'
              };
              
              localEvents[eventIndex] = updatedEvent;
              this.saveLocalEvents(localEvents);
              
              console.log('✅ [PRIORITY 0] User data protected and saved locally');
            }
          } catch (storageError) {
            console.error('❌ [PRIORITY 0] Failed to save user data locally:', storageError);
            // 即使本地保存失败，也要继续同步，但添加冲突标记
            if (!action.data.title.includes('⚠️同步冲突')) {
              action.data.title = '⚠️同步冲突 - ' + action.data.title;
              console.log('🚨 [PRIORITY 0] Added conflict marker to title');
            }
          }

          // 🔍 [PRIORITY 1] 最高优先级：检查事件基础状态
          console.log('🔍 [PRIORITY 1] === 事件基础状态检查 ===');
          
          // 1️⃣ 编辑锁定检查 - 防止远程覆盖正在编辑的事件
          if (this.isEditLocked(action.entityId)) {
            console.log('🔒 [PRIORITY 1] Event is edit-locked, skipping remote sync to protect local edits');
            return true; // 成功（本地已更新），但跳过远程同步
          }
          
          // 为当前更新操作设置编辑锁定
          this.setEditLock(action.entityId, 15000); // 15秒锁定期
          
          // 2️⃣ ExternalId 检查 - 决定是 UPDATE 还是 CREATE
          let cleanExternalId = action.data.externalId || action.originalData?.externalId;
          
          if (cleanExternalId && cleanExternalId.startsWith('outlook-')) {
            cleanExternalId = cleanExternalId.replace('outlook-', '');
          }
          
          console.log('🔍 [PRIORITY 1] ExternalId analysis:', {
            dataExternalId: action.data.externalId,
            originalExternalId: action.originalData?.externalId,
            finalCleanExternalId: cleanExternalId,
            decision: cleanExternalId ? 'PROCEED_WITH_UPDATE' : 'CONVERT_TO_CREATE'
          });
          
          // 🔄 如果没有 externalId，转为 CREATE 操作
          if (!cleanExternalId) {
            console.log('🔄 [PRIORITY 1] No externalId found - Converting UPDATE → CREATE (first-time sync)');
            
            // 执行 CREATE 逻辑（复用现有的 create 分支逻辑）
            let targetCalendarId = action.data.calendarId;
            if (!targetCalendarId && action.data.tagId) {
              targetCalendarId = this.getCalendarIdForTag(action.data.tagId);
            }
            if (!targetCalendarId) {
              targetCalendarId = this.microsoftService.getSelectedCalendarId();
            }
            
            const originalCreateTime = this.extractOriginalCreateTime(action.data.description || '');
            const createDescription = this.processEventDescription(
              action.data.description || '',
              'remarkable',
              'create',
              { ...action.data, preserveOriginalCreateTime: originalCreateTime }
            );
            
            const eventData = {
              subject: action.data.title,
              body: { contentType: 'text', content: createDescription },
              start: { dateTime: this.safeFormatDateTime(action.data.startTime), timeZone: 'Asia/Shanghai' },
              end: { dateTime: this.safeFormatDateTime(action.data.endTime), timeZone: 'Asia/Shanghai' },
              location: action.data.location ? { displayName: action.data.location } : undefined,
              isAllDay: action.data.isAllDay || false
            };
            
            const newEventId = await this.microsoftService.syncEventToCalendar(eventData, targetCalendarId);
            
            if (newEventId) {
              this.updateLocalEventExternalId(action.entityId, newEventId, createDescription);
              this.updateLocalEventCalendarId(action.entityId, targetCalendarId);
              this.clearEditLock(action.entityId);
              console.log('✅ [PRIORITY 1] UPDATE → CREATE completed successfully');
              
              // 📝 状态栏反馈
              window.dispatchEvent(new CustomEvent('sync-status-update', {
                detail: { message: `✅ 已创建1个事件到Outlook: ${targetCalendarId}` }
              }));
              return true;
            } else {
              this.clearEditLock(action.entityId);
              console.error('❌ [PRIORITY 1] UPDATE → CREATE failed');
              return false;
            }
          }

          // 🏷️ [PRIORITY 2] 高优先级：标签日历映射检查
          console.log('🏷️ [PRIORITY 2] === 标签日历映射检查 ===');
          
          let currentCalendarId = action.data.calendarId;
          let needsCalendarMigration = false;
          let targetCalendarId = currentCalendarId;
          
          if (action.data.tagId) {
            console.log('🔍 [PRIORITY 2] Checking tag mapping for tagId:', action.data.tagId);
            const mappedCalendarId = this.getCalendarIdForTag(action.data.tagId);
            
            console.log('🔍 [PRIORITY 2] Calendar mapping result:', {
              currentCalendar: currentCalendarId || 'None',
              mappedCalendar: mappedCalendarId || 'None',
              needsMigration: !!(mappedCalendarId && mappedCalendarId !== currentCalendarId)
            });
            
            // 检查是否需要跨日历迁移
            if (mappedCalendarId && mappedCalendarId !== currentCalendarId) {
              needsCalendarMigration = true;
              targetCalendarId = mappedCalendarId;
              
              console.log('🔄 [PRIORITY 2] Calendar migration required:', {
                from: currentCalendarId || 'Default',
                to: mappedCalendarId,
                eventTitle: action.data.title
              });
              
              try {
                // 删除原日历中的事件
                console.log('🗑️ [PRIORITY 2] Deleting from original calendar...');
                await this.microsoftService.deleteEvent(cleanExternalId);
                console.log('✅ [PRIORITY 2] Successfully deleted from original calendar');
                
                // 在新日历中创建事件（相当于迁移）
                const migrateDescription = this.processEventDescription(
                  action.data.description || '',
                  'remarkable',
                  'update',
                  action.data
                );
                
                const migrateEventData = {
                  subject: action.data.title,
                  body: { contentType: 'text', content: migrateDescription },
                  start: { dateTime: this.safeFormatDateTime(action.data.startTime), timeZone: 'Asia/Shanghai' },
                  end: { dateTime: this.safeFormatDateTime(action.data.endTime), timeZone: 'Asia/Shanghai' },
                  location: action.data.location ? { displayName: action.data.location } : undefined,
                  isAllDay: action.data.isAllDay || false
                };
                
                console.log('✨ [PRIORITY 2] Creating in new calendar:', targetCalendarId);
                const newEventId = await this.microsoftService.syncEventToCalendar(migrateEventData, targetCalendarId);
                
                if (newEventId) {
                  this.updateLocalEventExternalId(action.entityId, newEventId, migrateDescription);
                  this.updateLocalEventCalendarId(action.entityId, targetCalendarId);
                  this.clearEditLock(action.entityId);
                  console.log('✅ [PRIORITY 2] Calendar migration completed successfully');
                  
                  // 📝 状态栏反馈
                  window.dispatchEvent(new CustomEvent('sync-status-update', {
                    detail: { message: `🔄 已迁移1个事件到日历: ${targetCalendarId}` }
                  }));
                  return true;
                }
              } catch (migrationError) {
                console.error('❌ [PRIORITY 2] Calendar migration failed:', migrationError);
                // 迁移失败，继续执行普通更新
                needsCalendarMigration = false;
              }
            }
          }

          // 📝 [PRIORITY 3] 中等优先级：字段更新处理
          console.log('📝 [PRIORITY 3] === 字段更新处理 ===');
          
          // 3️⃣ 构建更新数据
          const updateData: any = {};
          
          // 📝 文本字段处理
          console.log('📝 [PRIORITY 3] Processing text fields...');
          if (action.data.title) {
            updateData.subject = action.data.title;
            console.log('📝 Title updated:', action.data.title);
          }
          
          // 描述处理：添加同步备注管理
          if (action.data.description !== undefined) {
            const updateDescription = this.processEventDescription(
              action.data.description || '',
              'remarkable',
              'update',
              action.data
            );
            updateData.body = { contentType: 'text', content: updateDescription };
            console.log('📝 Description updated with sync notes');
          }
          
          if (action.data.location !== undefined) {
            if (action.data.location) {
              updateData.location = { displayName: action.data.location };
              console.log('📝 Location updated:', action.data.location);
            } else {
              updateData.location = null; // 清空位置
              console.log('📝 Location cleared');
            }
          }
          
          // ⏰ 时间字段处理
          console.log('⏰ [PRIORITY 3] Processing time fields...');
          if (action.data.startTime && action.data.endTime) {
            try {
              const startDateTime = this.safeFormatDateTime(action.data.startTime);
              const endDateTime = this.safeFormatDateTime(action.data.endTime);
              
              // 时间验证
              const startDate = new Date(startDateTime);
              const endDate = new Date(endDateTime);
              
              if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
                throw new Error('Invalid date values');
              }
              
              if (endDate <= startDate) {
                throw new Error('End time must be after start time');
              }
              
              updateData.start = { dateTime: startDateTime, timeZone: 'Asia/Shanghai' };
              updateData.end = { dateTime: endDateTime, timeZone: 'Asia/Shanghai' };
              
              console.log('⏰ Time fields validated and updated:', {
                start: startDateTime,
                end: endDateTime
              });
              
            } catch (timeError) {
              console.error('❌ [PRIORITY 3] Time validation failed:', timeError);
              this.clearEditLock(action.entityId);
              throw new Error(`Time update failed: ${timeError instanceof Error ? timeError.message : 'Invalid time data'}`);
            }
          }
          
          // 🏷️ 元数据字段处理
          if (typeof action.data.isAllDay === 'boolean') {
            updateData.isAllDay = action.data.isAllDay;
            console.log('🏷️ All-day flag updated:', action.data.isAllDay);
          }

          // 🎯 [PRIORITY 4] 标准优先级：执行更新操作
          console.log('🎯 [PRIORITY 4] === 执行更新操作 ===');
          console.log('🎯 Sending update to Outlook:', {
            externalId: cleanExternalId,
            fieldsToUpdate: Object.keys(updateData),
            updateData: JSON.stringify(updateData, null, 2)
          });
          
          try {
            const updateResult = await this.microsoftService.updateEvent(cleanExternalId, updateData);
            
            if (updateResult) {
              this.clearEditLock(action.entityId);
              console.log('✅ [PRIORITY 4] Update operation completed successfully');
              
              // 📝 状态栏反馈
              window.dispatchEvent(new CustomEvent('sync-status-update', {
                detail: { message: `✅ 已更新1个事件到Outlook: ${targetCalendarId || 'Default'}` }
              }));
              return true;
            }
          } catch (updateError) {
            console.error('❌ [PRIORITY 4] Update operation failed:', updateError);
            
            // 🔧 错误处理：事件不存在时转为 CREATE
            if (updateError instanceof Error && updateError.message.includes('Event not found')) {
              console.log('🔄 [PRIORITY 4] Event not found - Converting to CREATE operation');
              
              try {
                let createCalendarId = targetCalendarId || this.microsoftService.getSelectedCalendarId();
                
                const recreateDescription = this.processEventDescription(
                  action.data.description || '',
                  'remarkable',
                  'create',
                  action.data
                );
                
                const recreateEventData = {
                  subject: action.data.title,
                  body: { contentType: 'text', content: recreateDescription },
                  start: { dateTime: this.safeFormatDateTime(action.data.startTime), timeZone: 'Asia/Shanghai' },
                  end: { dateTime: this.safeFormatDateTime(action.data.endTime), timeZone: 'Asia/Shanghai' },
                  location: action.data.location ? { displayName: action.data.location } : undefined,
                  isAllDay: action.data.isAllDay || false
                };
                
                const recreatedEventId = await this.microsoftService.syncEventToCalendar(recreateEventData, createCalendarId);
                
                if (recreatedEventId) {
                  this.updateLocalEventExternalId(action.entityId, recreatedEventId, recreateDescription);
                  this.updateLocalEventCalendarId(action.entityId, createCalendarId);
                  this.clearEditLock(action.entityId);
                  console.log('✅ [PRIORITY 4] Successfully recreated event after not found error');
                  
                  // 📝 状态栏反馈
                  window.dispatchEvent(new CustomEvent('sync-status-update', {
                    detail: { message: `🔄 已重新创建1个事件: ${createCalendarId}` }
                  }));
                  return true;
                }
              } catch (recreateError) {
                console.error('❌ [PRIORITY 4] Failed to recreate event:', recreateError);
              }
            }
            
            // 🔧 尝试最小更新（仅标题和描述）
            console.log('🔧 [PRIORITY 4] Attempting minimal update (title + description only)...');
            try {
              const minimalUpdate = {
                subject: action.data.title,
                body: { 
                  contentType: 'text', 
                  content: action.data.description || '📱 由 ReMarkable 更新'
                }
              };
              
              const minimalResult = await this.microsoftService.updateEvent(cleanExternalId, minimalUpdate);
              
              if (minimalResult) {
                this.clearEditLock(action.entityId);
                console.log('✅ [PRIORITY 4] Minimal update succeeded');
                
                // 📝 状态栏反馈
                window.dispatchEvent(new CustomEvent('sync-status-update', {
                  detail: { message: `⚠️ 已部分更新1个事件 (仅标题和描述)` }
                }));
                return true;
              }
            } catch (minimalError) {
              console.error('❌ [PRIORITY 4] Even minimal update failed:', minimalError);
            }
            
            // 🚨 最终错误处理：保持本地数据，标记同步冲突
            this.clearEditLock(action.entityId);
            console.error('🚨 [PRIORITY 4] All update attempts failed, marking as sync conflict');
            
            // 更新本地事件，添加同步冲突标记
            const localEvents = this.getLocalEvents();
            const conflictEventIndex = localEvents.findIndex((e: any) => e.id === action.entityId);
            if (conflictEventIndex !== -1) {
              if (!localEvents[conflictEventIndex].title.includes('⚠️同步冲突')) {
                localEvents[conflictEventIndex].title = '⚠️同步冲突 - ' + localEvents[conflictEventIndex].title;
                localEvents[conflictEventIndex].syncStatus = 'conflict';
                localEvents[conflictEventIndex].lastSyncError = updateError instanceof Error ? updateError.message : 'Unknown error';
                this.saveLocalEvents(localEvents);
                
                // 📝 状态栏反馈
                window.dispatchEvent(new CustomEvent('sync-status-update', {
                  detail: { message: `⚠️ 同步冲突: 已保护本地数据` }
                }));
              }
            }
            
            throw updateError;
          }

          // 📊 [PRIORITY 5] 低优先级：后续处理（已在上面的成功分支中处理）
          console.log('📊 [PRIORITY 5] Update process completed');
          break;